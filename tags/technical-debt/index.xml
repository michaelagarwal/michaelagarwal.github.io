<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technical Debt on Cloud, DevOps, Databases and AI with Michael</title>
    <link>https://michaelagarwal.github.io/tags/technical-debt/</link>
    <description>Recent content in Technical Debt on Cloud, DevOps, Databases and AI with Michael</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 24 Feb 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://michaelagarwal.github.io/tags/technical-debt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Technical Debt</title>
      <link>https://michaelagarwal.github.io/content/collections/2023/technical-debt/</link>
      <pubDate>Sat, 24 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://michaelagarwal.github.io/content/collections/2023/technical-debt/</guid>
      <description>Last updated: 2024-02-24&#xA;Part 1: Technical Debt Due to Monolithic Applications Large monolithic applications are not only challenging to scale but also difficult to comprehend and modify. Often, changes in one part of the application can inadvertently break another, adding complexity and unpredictability to the development process.&#xA;1️⃣ Technical Debt in Monolithic Applications Monolithic applications often suffer from significant technical debt due to their rigid, intertwined structures. This complexity hinders updates and new feature integrations, leading to escalated maintenance efforts and costs.</description>
    </item>
  </channel>
</rss>
